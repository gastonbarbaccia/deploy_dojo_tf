pipeline {
    agent any
    parameters {
        string(name: 'AWS_ACCESS_KEY_ID', defaultValue: '', description: 'AWS Access Key')
        password(name: 'AWS_SECRET_ACCESS_KEY', defaultValue: '', description: 'AWS Secret Key')
        string(name: 'AWS_REGION', defaultValue: 'us-east-1', description: 'AWS Region')
        string(name: 'INSTANCE_NAME', defaultValue: 'dojo', description: 'EC2 Name')
        string(name: 'INSTANCE_TYPE', defaultValue: 't2.medium', description: 'EC2 Instance type')
    }
    environment {
        AWS_ACCESS_KEY_ID     = "${params.AWS_ACCESS_KEY_ID}"
        AWS_SECRET_ACCESS_KEY = "${params.AWS_SECRET_ACCESS_KEY}"
        AWS_REGION            = "${params.AWS_REGION}"
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/gastonbarbaccia/deploy_dojo_tf.git'
            }
        }
        stage('Terraform Init') {
            steps {
                sh 'terraform init'
                sh 'terraform version'
                sh 'terraform fmt -check'
                sh 'terraform validate'
            }
        }
        stage('Terraform Apply') {
            steps {
                sh """
                terraform apply -auto-approve \
                    -var aws_region=${AWS_REGION} \
                    -var instance_name=${params.INSTANCE_NAME} \
                    -var instance_type=${params.INSTANCE_TYPE} \
                """
            }
        }

        stage('Setup DefectDojo via SSH') {
            steps {
                sh """
                    chmod 400 ${WORKSPACE}/dojo.pem
                    ssh -o StrictHostKeyChecking=no -i ${WORKSPACE}/dojo.pem ubuntu@${INSTANCE_IP} << 'EOF'
                        echo "=== ACTUALIZANDO SISTEMA ==="
                        sudo DEBIAN_FRONTEND=noninteractive apt-get update -y
                        sudo DEBIAN_FRONTEND=noninteractive apt-get upgrade -y
                        echo "=== INSTALANDO DEPENDENCIAS ==="
                        sudo apt-get install -y docker.io docker-compose git
                        sudo systemctl enable docker
                        sudo systemctl start docker
                        sudo usermod -aG docker ubuntu
                        echo "=== CLONANDO DEFECTDOJO ==="
                        cd /home/ubuntu
                        if [ ! -d django-DefectDojo ]; then
                        git clone https://github.com/DefectDojo/django-DefectDojo.git
                        fi
                        cd django-DefectDojo
                        cp .env.sample .env
                        echo "=== LEVANTANDO CONTAINERS ==="
                        docker-compose --progress=plain pull
                        docker-compose --progress=plain up -d --no-recreate
                        echo "=== FINALIZADO ==="
                    EOF
                    """
            }
        }
    }
}
